
//! Autogenerated weights for `pallet_move`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-05-24, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `michaeleberhardts-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/release/node-template
// benchmark
// pallet
// --chain
// dev
// --wasm-execution=compiled
// --pallet
// pallet-move
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_move`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> crate::weight_info::WeightInfo for SubstrateWeight<T> {
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `MoveModule::VMStorage` (r:3 w:1)
	/// Proof: `MoveModule::VMStorage` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 24]`.
	fn execute(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `8622`
		//  Estimated: `17037`
		// Minimum execution time: 346_000_000 picoseconds.
		Weight::from_parts(348_557_924, 0)
			.saturating_add(Weight::from_parts(0, 17037))
			// Standard Error: 8_132
			.saturating_add(Weight::from_parts(5_921_881, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `MoveModule::VMStorage` (r:1 w:1)
	/// Proof: `MoveModule::VMStorage` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 24]`.
	fn publish_module_generic(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `111`
		//  Estimated: `3576`
		// Minimum execution time: 56_000_000 picoseconds.
		Weight::from_parts(54_952_033, 0)
			.saturating_add(Weight::from_parts(0, 3576))
			// Standard Error: 10_473
			.saturating_add(Weight::from_parts(27_356_941, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `MoveModule::VMStorage` (r:1 w:1)
	/// Proof: `MoveModule::VMStorage` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_stdlib_bundle() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `7796`
		//  Estimated: `11261`
		// Minimum execution time: 208_000_000 picoseconds.
		Weight::from_parts(210_000_000, 0)
			.saturating_add(Weight::from_parts(0, 11261))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
