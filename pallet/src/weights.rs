
//! Autogenerated weights for `pallet_move`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-05-23, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `michaeleberhardts-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/release/node-template
// benchmark
// pallet
// --chain
// dev
// --wasm-execution=compiled
// --pallet
// pallet-move
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

// Note: The weights have not only been generated by the Substrate benchmarks with a template-node.
//       A couple of manual and additional modifications have been done which are marked in the
//       comments.

/// Weight functions for `pallet_move`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> crate::weight_info::WeightInfo for SubstrateWeight<T> {
    /// Because it is challenging to determine a reliable and fixed relation between gas costs and
    /// Substrate weights, we created Move scripts with known gas costs and increasing steps of 20.
    /// Twenty-five scripts with rising gas costs of about 20 for each iteration step were used as
    /// input for this benchmark. Therefore, the original output was divided by 20 afterwards.
	/// The range of component `n` is `[0, 24]`.
	fn execute(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 46_000_000 picoseconds.
		Weight::from_parts(44_730_881, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 9_543
            // Manually divided original output by 20: 13_002_180 / 20 = 650_109
			.saturating_add(Weight::from_parts(650_109, 0).saturating_mul(n.into()))
            // Manuelly added:
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `MoveModule::VMStorage` (r:1 w:1)
	/// Proof: `MoveModule::VMStorage` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 2]`.
	fn publish_module(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `7796`
		//  Estimated: `14073`
		// Minimum execution time: 44_000_000 picoseconds.
		Weight::from_parts(318_442_817, 0)
			.saturating_add(Weight::from_parts(0, 14073))
			// Standard Error: 3_649_708
			.saturating_add(Weight::from_parts(4_313_812, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `MoveModule::VMStorage` (r:1 w:1)
	/// Proof: `MoveModule::VMStorage` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 2]`.
	fn publish_module_bundle(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `7796`
		//  Estimated: `14073`
		// Minimum execution time: 44_000_000 picoseconds.
		Weight::from_parts(319_610_220, 0)
			.saturating_add(Weight::from_parts(0, 14073))
			// Standard Error: 3_670_322
			.saturating_add(Weight::from_parts(4_522_651, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `MoveModule::VMStorage` (r:1 w:1)
	/// Proof: `MoveModule::VMStorage` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_stdlib_bundle() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `7796`
		//  Estimated: `11261`
		// Minimum execution time: 204_000_000 picoseconds.
		Weight::from_parts(206_000_000, 0)
			.saturating_add(Weight::from_parts(0, 11261))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
